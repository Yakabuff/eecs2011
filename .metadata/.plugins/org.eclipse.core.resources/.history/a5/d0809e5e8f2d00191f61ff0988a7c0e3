import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Random;

public class SkipList<E> implements List<E> {
	

	
	private static class Node<E> {
		
		public static String negInf = "-oo";
		public static String posInf = "+oo";
		

		E value;
		int width;

		private Node<E> up;
		private Node<E> down;
		
		Node<E> next;
		Node<E> prev;
		
		public Node(E value ) {
			this.value = value;
			this.width = 0;	
		}
		
		void setNext(Node<E> next) {
			this.next = next;
		}
		
		Node<E> getNext(){
			return this.getNext();
		}
		
		void setPrev(Node<E> prev) {
			this.prev = prev;
		}
		
		Node<E> getPrev(){
			return this.prev;
		}
		
		Node<E> getUp(){
			return this.up;
		}
		void setUp(Node<E> up){
			this.up = up;
		}
		
		void setDown(Node<E> down){
			this.down = down;
		}
		
		Node<E> getDown(){
			return this.down;
		}
		
	}
	////////////////////////////

	Node<E> firstHead;
	Node<E> firstTail;
	int size;
	int height;
	
	List<Node> levels;
	Random r;
	
	public SkipList() {
		
		levels = new ArrayList();

		firstHead = new Node(null); //first element of the top level
		firstTail = new Node(null); //last element of the top level
		
		firstHead.setNext(firstTail);
		
		firstTail.setPrev(firstHead);
	
		
		size = 0;
		height++;
		levels.add(firstHead);
	}
	
	//add node and keep flipping coin to determine how many high u need it
	//E is a node
	@Override
	public boolean add(E e) {
		//if entry found update value in p
		//else insert in correct place
			//make random  # levels. if num levels > existing, make new level
		
		Node<E> p,q, toAdd;
		int i;
		
		p = (Node) e;
		toAdd = (Node)e;
		
		//check if e exists
		get(toAdd.width);
		
		
		//check if found width = e width
		if(p.width == (int)e) {
			Integer old = p.width;
			p.value = e;
			return true;
			
		}else {
			//add node the bottom level
			q = new Node(e);
			q.setPrev(p);
			q.setNext(p.getNext());
			p.getNext().getPrev().setPrev(q);
			p.setNext(q);
			
			i = 0;
			//start building up
			while(r.nextDouble()<0.5) { //while flipping tails
				if(i>= height) {
					newLevel();
				}
				while(p.getUp()==null) { //traverse up node behind node u adding
					p = p.getPrev();  //find node behind the next node with no up
					
				}
				p = p.getUp(); 
				
				Node add = new Node(e);
				
				//set links of new added Node
				add.setNext(p.getNext());
				add.setPrev(p);
				
				add.setDown(q);
				
				//set links of neighbouring nodes
				p.getNext().setPrev(add);
				p.setNext(add);
				q.setUp(add);
				
				q = add;
				
				i++;
			}
			
			size = size +1;
			
			return true;
		}
	}
	

	void newLevel() {
		Node head = new Node(1); //first element of the top level
		Node tail = new Node(0); //last element of the top level
		
		Node topHead = getTopHead();
		
		head.setNext(tail);
		head.setDown(topHead);
		tail.setPrev(head);
		
		height++;
		
		levels.add(head);
		
	}
	

	
	Node getTopHead() {
		boolean found = false;
		Node top = this.firstHead;
		while(!found) {
			if(top.getUp()!= null) {
				top = top.getUp();
			}else if(top.getUp() == null) {
				found = true;
			}
		}
		return top;
	}
	
	//insert node at n index
	@Override
	public void add(int index, E e) {
		
 
		
//		for(Node n : levels) {
//			while(){
//				
//			}
//		}
//		
	}
	
	//E is a node. width is the index
	@Override
	public E get(int width) {
		Node newNode = null;
		width = width+1; // dont count head
		
		for(int i = levels.size()-1;i>= 0; i--) { //bottom to top
			
			while(width >= (levels.get(i).getNext().width)) {  //(check if width is greater than next node width)
				width = width - levels.get(i).width;  //subtract widths
				newNode = levels.get(i).getNext(); //

			}
			if(i ==0 && newNode.width==0) {
				return (E) newNode.getPrev();
			}
			
		}
		
		return (E) newNode;
	}
	
	@Override
	public int size() {
		// TODO Auto-generated method stub
		
		return size;
	}
	
	@Override
	public String toString() {
		String s = "";
		
		for(int i = levels.size()-1;i>= 0; i--) { //top to bottom
			
			Node head = levels.get(i);
			while(head.getNext().width != 0) {
				s += head.width + " ";
			}
		}
		return s;
	}
	
///////////////////////////////////////////////
	@Override
	public boolean addAll(Collection arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean addAll(int arg0, Collection arg1) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean contains(Object arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean containsAll(Collection arg0) {
		// TODO Auto-generated method stub
		return false;
	}



	@Override
	public int indexOf(Object arg0) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Iterator iterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int lastIndexOf(Object arg0) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public ListIterator listIterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ListIterator listIterator(int arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean remove(Object arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public E remove(int arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean removeAll(Collection arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean retainAll(Collection arg0) {
		// TODO Auto-generated method stub
		return false;
	}




	@Override
	public List subList(int arg0, int arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object[] toArray() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object[] toArray(Object[] arg0) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public E set(int index, E element) {
		// TODO Auto-generated method stub
		return null;
	}

}
