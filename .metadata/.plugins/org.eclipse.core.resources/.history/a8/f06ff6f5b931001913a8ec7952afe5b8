import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Random;

public class SkipList<E> implements List<E> {
	
///////////////////    NODE CLASS ///////////////////
	
	public static class Node<E> {
		
		E value;
		int width;
		int index;
		
		Node<E> up;
		Node<E> down;
		Node<E> next;
		Node<E> prev;
		
		public Node(E value ) {
			this.value = value;	
		}
		
		void setNext(Node<E> next) {
			this.next = next;
		}
		
		Node<E> getNext(){
			return this.getNext();
		}
		
		void setPrev(Node<E> prev) {
			this.prev = prev;
		}
		
		Node<E> getPrev(){
			return this.prev;
		}
		
		Node<E> getUp(){
			return this.up;
		}
		void setUp(Node<E> up){
			this.up = up;
		}
		
		void setDown(Node<E> down){
			this.down = down;
		}
		
		Node<E> getDown(){
			return this.down;
		}
		
	}
	///////////////////////////////////////////////////

	Node<E> firstHead;
	Node<E> firstTail;
	int size = 0;
	int height = 1;
	
	List<Node> levels;
	Random r = new Random();
	final double p = 0.5; //coin
	final int MAX_LEVEL = 20;	
	
	public SkipList() {
		
		levels = new ArrayList();

		firstHead = new Node(null); //first element of the top level
		firstTail = new Node(null); //last element of the top level
		
		firstHead.setNext(firstTail);
		
		firstTail.setPrev(firstHead);
	
		
		size = 0;
		height++;
		levels.add(firstHead);
	}
	
	//add node and keep flipping coin to determine how many high u need it
	//E is a node
	@Override
	public boolean add(E e) {
		//add e to end of bottom layer
		size++;
		add(size()-1, e);
		
		return true;
	}
	
	

	void newLevel() {
		Node head = new Node(null); //first element of the top level
		
		
		Node topHead = levels.get(levels.size()-1);
		
		
		head.setDown(topHead);
		
		
		head.width = 1;
		
		
		height++;
		
		levels.add(head);
		
	}
	
	int randomLevel() {
		int lvl = 1;
		while ((r.nextDouble() < p) && (lvl < MAX_LEVEL)) {
			lvl = lvl +1;
		}
		return lvl;
	}
	
	//insert node at n index
	@Override
	public void add(int index, E e) {
		
		
		
		if(index < 0 || index > size) {
			throw new IndexOutOfBoundsException();
		}
		
		Node head = this.firstHead;
		
		Node node = head;
		
		for(int i =0; i<index;i++) {
			node = node.next;
			
		}
		
		node.next = new Node(e);
		
		size++;

	}
	
	//E is a node. width is the index
	@Override
	public E get(int width) {
		Node currNode = levels.get(levels.size()-1); //top head node
		width = width+1; // dont count head
		
		for(int i = levels.size()-1;i>= 0; i--) { //iterate through levels (top to bottom)
			
			while(width >= (currNode.width)) {  //(check if width is greater than next node width)
				width = width - currNode.width;  //subtract widths
				currNode = currNode.getNext(); //advance to next node

			}
			
			currNode = currNode.down;
			
			if(width==0) {
				return (E) currNode.value;
			}
			
		}
		
		return (E) currNode.value;
	}
	
	@Override
	public int size() {
		// TODO Auto-generated method stub
		
		return size;
	}
	
	@Override
	public String toString() {
		
		String s = "";
		
		s+= this.firstHead.value;
		s+= this.firstHead.next.value;
		s+= this.firstHead.next.next.value;
		s+= this.firstHead.next.next.next.value;
		
		return s;
	}
	
///////////////////////////////////////////////
	@Override
	public boolean addAll(Collection arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean addAll(int arg0, Collection arg1) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean contains(Object arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean containsAll(Collection arg0) {
		// TODO Auto-generated method stub
		return false;
	}



	@Override
	public int indexOf(Object arg0) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Iterator iterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int lastIndexOf(Object arg0) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public ListIterator listIterator() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ListIterator listIterator(int arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean remove(Object arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public E remove(int arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean removeAll(Collection arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean retainAll(Collection arg0) {
		// TODO Auto-generated method stub
		return false;
	}




	@Override
	public List subList(int arg0, int arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object[] toArray() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object[] toArray(Object[] arg0) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public E set(int index, E element) {
		// TODO Auto-generated method stub
		return null;
	}

}
